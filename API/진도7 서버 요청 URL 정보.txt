[내용에 따른 URL 작성법]

ex 1)
공지사항 목록 화면
url : /notice
JS -----------------------------------
window.location.href='/notice';

ex 2)
공지사항 상세보기 화면
url : /notice/content/게시글 번호
JS -----------------------------------
window.location.href='/notice/content/70';

ex 3)
공지사항 타입별 화면
url : /notice/content/공지타입
JS -----------------------------------
window.location.href='/notice/NOTICE';


======================================


[진도7 프로젝트 화면에 대한 서버 요청 URL 정보]

1. 홈화면 (인덱스) - location
type : GET	
url : /main


2. 로그인 화면
	2-1. 로그인 화면 - location
	type : GET
	url : /login
	2-2. 로그인 공개 키 요청 - Ajax
	type : GET
	url : /login/getPublicKey
	응답 형태 : { 
		"publicKey" : "abcdefg..."
	 }
	2-3. 로그인 처리 - Ajax
	type : POST
	url : /login
	param : { 
		"username" : "암호화된 아이디", 
		"userpw" : "암호화된 비밀번호" 
	}
	응답형태 : 
	성공 
	{ 
		"errorCode" : 0, 
		"location" : "/main" 
	} 
	/ 실패 {
		"errorCode" : 1 / 2, 
		"msg" : ""
	}


	2-4. 로그아웃 처리 - Ajax
	type : GET
	url : /logout
	응답형태 : 
	성공 
	{ 
		"errorCode" : 0, 
		"msg" : "", 
		"location" : "/main" 
	} 
	/ 실패 
	{ 
		"errorCode" : 1, 
		"msg" : "", 
		"location" : "/main" 
	}


3. 광고수익 화면
	3-1. 광고수익 화면 - location
	type : GET
	url : /adprofit
	3-2. 광고 수익 결산 & 예상 데이터 - Ajax
	type : GET
	url : /adprofit/fetch
	응답형태 : 
	- 광고 수익 결산
	{ 
		"closingData": [
			{ 
				"id" : 1, 
				"year" : "2019", 
				"month" : "3", 
				"day1" : 230.00, 
				"nullity1" : 20.00, 
				"day2" : 210.00, 
				"nullity2" : 105.00, 
				"day3" : 113.00, 
				"nullity3" : 0.00, 
					...  
				"day31":0.00, 
				"nullity31" : 0.00 
			},
			{ 
				"id" : 2, 
				"year" : "2019", 
				"month" : "2", 
				"day1" : 250.00,
				 "nullity1" : 200.00, 
				"day2" : 111.00, 
				"nullity2" : 5.00, 
				"day3" : 125.00, 
				"nullity3" : 0.00, 
					... 
				"day31" : 0.00, 
				"nullity31" : 0.00 
			}
		],
		"forecastData" : {
			"forecastData" : { // 성공 시
				"id" : 1, 
				"year" : "2019", 
				"month" : "4", 
				"day1" : 230.00, 
				"day2" : 210.00, 
				"day3" : 113.00, 
					... 
				"day30" : 0.00, 
				"day31" : 0.00 
			},
			"errorCode" : 0
		},
		"forecastData" : { // 실패 시
			"msg" : "이번 달 데이터를 아직 예상할 수 없습니다."
			, "errorCode" : 1
		}
	}


4. 공지사항 화면
	4-1. 공지사항 목록 화면 - location
	type : GET
	url : /notice
	4-2. 공지사항 목록 요청 & 검색 - Ajax
	type : GET
	공지사항 목록 url : /notice/fetch?page=${0}&type=ALL   (page = 0 - 1페이지 / type = ALL, NOTICE, UPDATE, EVENT - 대문자여야 함)
	공지사항 검색 url : /notice/fetch?page=${0}&type=ALL&searchWord=인코딩된 문자열 (searchWord = 검색 키워드)
	응답형태 : 
	{ 
		"notice" : [ 
			{ 
				"id" : 1, 
				"type" : "NOTICE", 
				"typeToKorean" : "공지사항", 
				"title" : "", 
				"writer" : { 
					"id" : null, 
					"appid" : 6, 
					"username" : "월드스폰", 
					"userpw" : "", 
					"roles" : [ 
						"USER" 
					] 
				}, 
				"content" : "", 
				"useYN" : true, 
				"created" : "2019-02-26" 
			} 
		] 
	}
	참고사항 : 공지사항 목록은 무조건 20개씩 배열로 던집니다. 따라서 페이지 번호(page)와 정렬 기준(sort), 공지사항 타입(type)만 주시면 그에 맞는 페이지의 공지사항 목록을 드립니다.
	참고사항2 : 검색 키워드는 반드시 자바스크립트의 encodeURIComponent() 함수로 인코딩하여 던져주세요. 이 함수를 사용하지 않으면 서버에서 한글을 식별하지 못합니다.


	4-4. 공지사항 상세보기 화면 - location
	type : GET
	url : /notice/content
	4-5. 공지사항 상세보기 데이터 요청 - Ajax
	type : GET
	url : /notice/content/게시글 번호
	응답형태 : 
	성공
	{
		"errorCode": 0,
		"notice": {
			"id": 1,
			"type": "NOTICE",
			"typeToKorean": "공지사항",
			"title": "1234",
			"writer": {
				"id": null,
				"appid": 6,
				"username": "TEST02",
				"userpw": "",
				"roles": [
				  "ADMIN"
				],
			},
			"content": "1234",
			"useYN": true,
			"created": "2019-02-26"
		}
	}
	/ 실패
	{
		"msg": "존재하지 않는 게시글입니다.",
		"errorCode": 1
	}


5. FAQ 화면
	4-1. FAQ 목록 화면
	type : GET
	url : /faq
	4-2. FAQ 상세보기 화면
	type : GET
	url : /faq/content/게시글 번호


6. 1:1 문의 화면
	4-1. 1:1 문의 목록 화면
	type : GET
	url : /myQ
	4-2. 1:1 문의 상세보기 화면
	type : GET
	url : /myQ/content/게시글 번호
	4-3. 1:1 문의하기 화면
	type : GET
	url : /myQ/directQ


7. 게임 결과 화면
type : GET
url : /game